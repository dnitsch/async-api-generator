# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

env:
  NAME: async-api-generator
  GIT_TAG: "0.0.0"
  VERSION: "v{{.GIT_TAG}}"
  REVISION: "aaaabbbb"
  NETCORE_TARGET_ARCH: "osx-arm64"
  GO_TARGET_ARCH: "darwin"

tasks:
  test_prereq: 
    internal: true
    preconditions:
      - go version
    cmd: |
      cd ./src/go/async-api-gen-doc && mkdir -p .coverage
      go install github.com/jstemmer/go-junit-report/v2@latest
      go install github.com/axw/gocov/gocov@latest
      go install github.com/AlekSi/gocov-xml@latest

  clean_dotnet:
    internal: true
    cmds:
      - rm -rf dist/dotnet/*
      - mkdir -p dist/dotnet
  clean_go:
    internal: true
    cmds:
      - rm -rf dist/go/*
      - mkdir -p dist/go

  test_asyncapi_doc_generator:
    desc: Install dependencies
    internal: false
    deps:
      - test_prereq
    cmd: |
      set -exo pipefail
      cd ./src/go/async-api-gen-doc
      go test ./... -timeout 30s -v -mod=readonly -race -coverprofile=.coverage/out > .coverage/test.out
  
  node_prereq:
    internal: true
    cmds:
      - npm i -g pnpm@8.6.0
      - rm -rf dist node_modules .coverage

  install_node:
    desc: Install dependencies
    internal: true
    deps:
      - node_prereq
    cmds:
      - pnpm i

  install_go:
    desc: Install dependencies
    internal: true
    cmd: |
      cd src/go/async-api-gen-doc
      go mod tidy
  
  lint_asyncapi_doc_generator:
    desc: Runs lint and vet 
    cmd: |
      cd src/go/async-api-gen-doc 
      go vet 

  install_workspace:
    desc: Install workspace dependencies
    internal: false
    deps:
      - node_prereq
    cmds:
      - cd src/go/async-api-gen-doc && go mod tidy
      - pnpm i

  coverage_asyncapi_doc_generator:
    desc: generate coverage
    deps:
      - test_asyncapi_doc_generator
    cmds: 
      - |
        cd src/go/async-api-gen-doc
        go-junit-report -in .coverage/test.out > .coverage/go-junit.xml
      - |
        cd src/go/async-api-gen-doc
        gocov convert .coverage/out | gocov-xml > .coverage/cobertura.xml

  show_coverage_asyncapi_doc_generator: 
    desc: Opens the current coverage viewer for the the gendoc utility.
    deps:
      - test
    cmd: go tool cover -html=./src/go/async-api-gen-doc/.coverage/out

  show_docs_asyncapi_doc_generator:
    desc: Opens a webview with godoc running
    summary: |
      Already filters the packages to this one and enables
      internal/private package documentation
    cmd: |
      go install golang.org/x/tools/cmd/godoc@latest
      open http://localhost:6060/pkg/github.com/dnitsch/async-api-generator/?m=all
      cd src/go/async-api-gen-doc && godoc -notes "BUG|TODO" -play -http=:6060

  bin_asyncapi_doc_generator: 
    desc: Generates binaries in a dist folder
    summary: |
      Generates all the binaries for the gendoc utility.

      can be called from inside CI like this:
      
      `task gendoc_bin GIT_TAG=0.1.2 REVISION=$commit_sha`
    deps:
      - clean_go
    cmds:
      - for: { var: GO_ARCHS, as: GO_TARGET_ARCH }
        cmd: | 
          mkdir -p ./dist/go/{{.GO_TARGET_ARCH}}
          GOOS={{.GO_TARGET_ARCH}} CGO_ENABLED=0 go build -mod=readonly -buildvcs=false {{.LDFLAGS}} -o ./dist/go/{{.GO_TARGET_ARCH}}/gendoc ./src/go/async-api-gen-doc/cmd
          cp README.md ./dist/go/{{.GO_TARGET_ARCH}}/README.md
    vars:
      LDFLAGS: -ldflags="-s -w -X \"github.com/dnitsch/async-api-generator/cmd/async-api-gen-doc.Version=${VERSION}\" -X \"github.com/dnitsch/async-api-generator/cmd/async-api-gen-doc.Revision={{.REVISION}}\" -extldflags -static"
      GO_ARCHS: darwin windows linux
  
  # EventCatalog Plugin tasks
  test_eventcatalog_plugin:
    desc: Builds and tests the EventCatalog plugin
    summary: |
      
      Testing of the plugin and any local dependencies against a licence checker 
    deps:
      - install_node
    cmds: 
      - pnpm run license:check 
      - pnpm run test

  build_eventcatalog_plugin:
    desc: Builds  the EventCatalog plugin
    summary: |
      Building and testing of the plugin and any local dependencies
    deps:
      - test_eventcatalog_plugin
    cmds: 
      - pnpm run build 

  show_coverage_eventcatalog_plugin: 
    desc: Opens the current coverage viewer for the the event catalog plugin.
    deps:
      - test_eventcatalog_plugin
    cmd: pnpm run --filter @dnitsch/plugin-doc-generator-asyncapi-remote-source view:coverage

  publish_eventcatalog_plugin:
    desc: Publishes to local NPM
    cmds: 
      - pnpm run build 
      - pnpm publish --no-git-checks --filter "@dnitsch/*"
  
  # SchemaGenerator DOTNET
  bin_schemagen:
    desc: builds a single binary of the schema generator
    deps:
      - clean_dotnet
    cmds:
      - cmd: |
          cd src/dotnet 
          dotnet clean Schema.Generator/Schema.Generator.sln
      - for: { var: NETCORE_TARGET_ARCHS, as: NETCORE_TARGET_ARCH }
        cmd: | 
          cd src/dotnet
          dotnet publish Schema.Generator/Schema.Generator.CLI/Schema.Generator.CLI.csproj -r {{.NETCORE_TARGET_ARCH}} -o ../../dist/dotnet/{{.NETCORE_TARGET_ARCH}};
    vars:
      NETCORE_TARGET_ARCHS: win-x64 osx-x64 osx-arm64 linux-x64 linux-musl-x64
    env:
      VERSION: "{{.GIT_TAG}}"