asyncapi: 2.5.0
id: urn:domain:bar:service2
info:
  title: service2
  version: 0.0.1
  description: |
    # Sample
    
    This is some lengthy description of the service itself.
    
    encompassed and in Markdown readable as per usual
defaultContentType: application/json
# Channels is a map of physical queues or topics that this service ( as identified by the ID) 
# will either pulbish or subscribe to 
channels:
  foo~bar:
    description: |
      No Channel description provided...
    parameters: {}
    publish:
      summary: | 
        No Operation Summary provided...
      description: |
        this operation publishes this message
      operationId: BizContextAreaEvent
      # Common operation traits relating to transport of the message over this specific pub/sub channel
      traits: []
      message:
        name: BizContextAreaEvent
        messageId: BizContextAreaEvent
        title: BizContextAreaEvent
        summary: |
          
          No Message Summary provided...
        description: | 
          
          No Message Description provided...
        contentType: application/json
        # if message examples in JSON use here
        # examples: []
        ##### Additional non AsyncAPI parseable components go here #####
        ###BEGIN_EVENTCATALOG_EXAMPLES###  
          #->ey....
        ###END_EVENTCATALOG_EXAMPLES###
        # common traits can be described here - this is akin to the envelope concept in [EventCatalog.dev](https://www.eventcatalog.dev/docs/)
        traits: []
        # this has to be a valid json schema string
        payload: {
          "$id": "https://example.com/blog-post.schema.json",
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "description": "A representation of a blog post",
          "type": "object",
          "required": ["title", "content", "author"],
          "properties": {
            "title": {
              "type": "string"
            },
            "content": {
              "type": "string"
            },
            "publishedDate": {
              "type": "string",
              "format": "date-time"
            },
            "author": {
              "$ref": "https://example.com/user-profile.schema.json"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }

          
